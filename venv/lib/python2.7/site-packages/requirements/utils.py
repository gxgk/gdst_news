import datetime
import subprocess
import re
from pkg_resources import Requirement 

uri_regex = re.compile(r'^(svn|git|bzr|hg|http|https|file|ftp):(\.+)')
file_uri_regex = re.compile(
    r'^(?P<path>[^#]+)#egg=(?P<name>[^&]+)$', re.MULTILINE)
editable_uri_regex = re.compile(r'^((?P<vcs>svn|git|bzr|hg)\+)?'
                                '(?P<uri>[^#&]+)#egg=(?P<name>[^&]+)$',
                                re.MULTILINE)
vcs_uri_regex = re.compile(r'^(?P<vcs>svn|git|bzr|hg)\+'
                           '(?P<uri>[^#&]+)#egg=(?P<name>[^&]+)$',
                           re.MULTILINE)

def is_uri(uri):
    match = re.match(uri_regex, uri.lower())
    return match is not None


def is_vcs_uri(uri):
    match = re.match(vcs_uri_regex, uri.lower())
    return match is not None


def parse(s):
    # stolen from https://github.com/mattack108/pipin
    if not isinstance(s, basestring):
        s = s.read()

    excludes = (
        '#', '-r', '--requirement',
        '-f', '--find-links',
        '-i', '--index-url', '--extra-index-url', '--no-index',
        '-Z', '--always-unzip')

    for line in s.splitlines():
        line = line.strip()
        if not line:
            continue

        if [x for x in excludes if line.startswith(x)]:
            continue

        if line.startswith('file:'):
            match = re.match(file_uri_regex, line)
        # TODO: shall it check for editable apps?
        elif line.startswith('-e') or line.startswith('--editable') or \
                is_uri(line) or is_vcs_uri(line):
            if line.startswith('-e'):
                tmpstr = line[len('-e'):].strip()
            elif line.startswith('--editable'):
                tmpstr = line[len('--editable'):].strip()
            else:
                tmpstr = line
            match = re.match(editable_uri_regex, tmpstr)
        else:
            try:
                yield Requirement.parse(line)
                continue
            except ValueError:
                match = None

        if match:
            yield match.groupdict()['name']
        else:
            raise ValueError('Invalid requirement line "%s"' % line)


def check_output(cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE,
        universal_newlines=True).communicate()[0]


def parse_header_next_link(value):
    """Return a next link from headers."""
    link = None

    for val in value.split(","):
        try:
            url, params = val.split(";", 1)
        except ValueError:
            url, params = val, ''

        # only next params please
        if params and not 'next' in params:
            continue

        return url.strip("<> '\"")
    return link


def convert_json_dt(dt):
    """Converts JSON string datetime into Python datetime object."""
    return datetime.datetime.strptime(dt, '%Y-%m-%dT%H:%M:%SZ')
