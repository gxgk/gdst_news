import datetime
import json

from flask import render_template, request, redirect, session, url_for, flash

from requirements import app
from requirements.github import github
from requirements.models import db, scheduler, User, Repo
from requirements.utils import convert_json_dt, parse_header_next_link
from requirements.tasks import process_requirements


@app.route('/')
def index():
    # TODO: show list of repos/packages if user logged in
    return render_template('index.html')


@app.route('/testdata')
def testdata():
    db.drop_all()
    db.create_all()
    me = User('blah1')
    me.username = 'Mellen'
    me.is_member = True

    notme = User('blah3')
    notme.username = 'Keith'
    notme.is_member = True

    ro = User('blah2')
    ro.username = 'Refresh Oxford'
    ro.is_member = False

    repo1 = Repo()
    repo1.repo_name = 'Mellen\'s first repo'

    db.session.add(me)
    db.session.add(notme)
    db.session.add(ro)
    db.session.add(repo1)
    db.session.commit()

    me.repos.append(repo1)

    ro.members.append(me)
    ro.members.append(notme)

    db.session.commit()

    result = '{0}, {1}, {2}'.format(str(me), str(ro), str(repo1)).replace('<', '&lt;')
    result += '<br>'
    result += "Mellen's repo is called '{0}'".format(str(me.repos[0])).replace('<', '&lt;')
    result += '<br>'
    result += "{0} is member of {1}".format(str(me), str(me.orgs[0])).replace('<', '&lt;')
    result += '<br>'
    for member in ro.members:
        result += "{0} has member {1} <br>".format(str(ro), str(member)).replace('<', '&lt;')
    return result


@app.route('/db_reset')
def db_reset():
    db.drop_all()
    db.create_all()
    session.pop('github_token', None)

    flash('All okay', 'info')
    return redirect(url_for('index'))


def _get_data(user, data):
    data_dict = {
        'user': user,
        'name': data['name'],
        'url': data['html_url'],
        'owner': data['owner']['login'],
        'created_date': convert_json_dt(data['created_at']),
        'updated_date': convert_json_dt(data['updated_at']),
        'public': not data['private'],
        'private': data['private'],
        'fork': data['fork'],
    }
    return data_dict


@app.route('/sync')
def sync():
    if 'github_token' in session:
        repos_count = 0
        token = session.get('github_token')[0]
        user = User.query.filter_by(github_access_token=token).first()
        # get repos of currently logged in user
        user_repos = github.get('user/repos')
        user_data = json.loads(user_repos.raw_data)
        repos_count += len(user_data)
        for x in user_data:
            kwargs = _get_data(user, x)
            r = Repo(**kwargs)
            db.session.add(r)
            user.repos.append(r)
            db.session.commit()

        # get orgs the user is part of
        orgs = github.get('user/orgs')
        for x in json.loads(orgs.raw_data):
            # get repos from each org
            org_repos = github.get('orgs/{0}/repos'.format(x['login']))
            org_data = json.loads(org_repos.raw_data)
            repos_count += len(org_data)
            for x in org_data:
                kwargs = _get_data(user, x)
                r = Repo(**kwargs)
                db.session.add(r)
                user.repos.append(r)
                db.session.commit()
            # check if there's more results
            # if 'Link' in org_repos._resp.headers:
            #     next_link = parse_header_next_link(org_repos._resp.headers['Link'])
            #     if next_link:
            #         org_repos = github.get(next_link)

        msg = '{} repos added to the queue.'
        flash(msg.format(repos_count), 'info')
        return redirect(url_for('repos'))
    return redirect(url_for('login'))


@app.route('/repos')
def repos():
    token = session.get('github_token')[0]
    user = User.query.filter_by(github_access_token=token).first()
    if not user:
        return 'user 404'

    context = {
        'user': user,
        'owners': Repo.query.with_entities(Repo.owner).distinct().all(),
        'repos': user.repos.order_by(Repo.updated_date.desc()).all()
    }
    return render_template('repos.html', **context)


@app.route('/repo/<pk>', methods=['GET', 'POST'])
def repo_detail(pk):
    repo = Repo.query.filter_by(id=pk).first()
    if not repo:
        return '404'

    if request.method == 'POST':
        run_at = (datetime.datetime.now() + datetime.timedelta(seconds=1))
        kwargs = {
            'repo': repo,
            'github_token': session.get('github_token')
        }
        with app.test_request_context():
            scheduler.add_date_job(process_requirements, run_at, kwargs=kwargs)

        flash('Sent to hell', 'info')
        return redirect(url_for('repo_detail', pk=repo.id))

    context = {
        'repo': repo,
        'packages': repo.packages.all(),
    }
    return render_template('repo_detail.html', **context)


@app.route('/login')
def login():
    if session.get('github_token') is None:
        return github.authorize(callback=url_for('authorized', _external=True))
    else:
        flash("You're already logged in.", 'info')
        return redirect(url_for('repos'))


@app.route('/logout')
def logout():
    session.pop('github_token', None)
    flash("You've successfully logged out.", 'info')
    return redirect(url_for('index'))


@app.route('/login/authorized')
@github.authorized_handler
def authorized(resp):
    if resp is None:
        flash('Access denied: reason=%s error=%s' % (
            request.args['error_reason'],
            request.args['error_description']), 'error')

    if 'access_token' in resp:
        token = (resp['access_token'], '')
        session['github_token'] = token

        user = User.query.filter_by(github_access_token=token[0]).first()
        if user is None:
            username = github.get('user').data.get('login', 'there')
            user = User(username, token[0])
            db.session.add(user)
            db.session.commit()

        session['user_id'] = user.id
        session['user_name'] = user.username

        return redirect(url_for('sync'))
    return flash(str(resp), 'error')


@github.tokengetter
def get_github_oauth_token():
    return session.get('github_token')
